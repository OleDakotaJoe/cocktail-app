{"version":3,"sources":["components/Ingredients.js","components/RecipeCard.js","components/RecipeList.js","components/Searchbox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Ingredients","props","eachDrink","mapDrink","Object","entries","ingredientList","map","value","i","j","ingredient","amount","className","key","StrictMode","RecipeCard","recipeName","instructions","photoUrl","glass","id","src","alt","Recipelist","prop","recipeJSON","obj","length","entry","cardComponent","idDrink","strDrink","strInstructions","strDrinkThumb","strGlass","Searchbox","keyDown","keyUp","keyPress","placeholder","type","onKeyDown","onKeyUp","onKeyPress","App","event","keyCode","setState","query","target","fetch","state","then","resp","json","drink","this","RecipeList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.694ea471.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Ingredients = (props) => {\r\n\r\n    const { eachDrink } = props;\r\n\r\n    const mapDrink = Object.entries(eachDrink)\r\n    const ingredientList = mapDrink.map((value,i) => {\r\n        if (i > 20 && i < 36 && (value[1] !== null) ){\r\n                let j=i+15;\r\n                let ingredient = (mapDrink[i][1] === null) ? '': mapDrink[i][1];\r\n                let amount = (mapDrink[j][1] === null) ? '': mapDrink[j][1];\r\n\r\n                return(\r\n                        \r\n                        <div className=\"tc\" key={`${mapDrink[0][1]}.${i}`}> {`${amount} ${ingredient}`}</div>\r\n                \r\n                \r\n                )\r\n                \r\n            \r\n            \r\n        }\r\n    }\r\n    \r\n    )\r\n    \r\n\r\n\r\n    return(\r\n        \r\n        <React.StrictMode>\r\n            {ingredientList}\r\n        </React.StrictMode>\r\n    )\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\nexport default Ingredients;\r\n","import React from 'react';\r\nimport Ingredients from './Ingredients'\r\n\r\n\r\nconst RecipeCard = (props) => {\r\n   const {  recipeName, instructions, photoUrl, glass, eachDrink, id } = props;\r\n   return(\r\n        <div className=\"tc bg-light-blue ma3 dib br3 pa3 ma2 grow bw2 shadow-5 recipeCard\">\r\n            <img src={`${photoUrl}/preview`} alt={recipeName}/>\r\n            <div>\r\n                <h1>{recipeName}</h1>\r\n                <p>Glass: {glass}</p>\r\n                    <Ingredients key={id} eachDrink={eachDrink} />\r\n                <p>{instructions}</p>\r\n                \r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default RecipeCard;","import  React from 'react';\r\nimport RecipeCard from './RecipeCard';\r\n\r\n\r\n\r\nconst Recipelist = (prop) => {\r\n    const {recipeJSON} = prop;\r\n    const obj = Object.entries(recipeJSON)\r\n    if ( obj.length > 0) {\r\n        const entry = obj[0][1];\r\n        if (entry !== null) {\r\n        const cardComponent = entry.map(value =>  <RecipeCard key={value.idDrink} id={value.idDrink} recipeName={value.strDrink} instructions={value.strInstructions} photoUrl={value.strDrinkThumb}  glass={value.strGlass} recipeJSON ={recipeJSON} eachDrink={value}/>)\r\n            return(\r\n        <React.StrictMode>\r\n            {cardComponent}\r\n        </React.StrictMode>\r\n    \r\n        );\r\n        } else {\r\n            return <div className=\"tc\"><p>No results, check your spelling or try another cocktail</p></div>;\r\n        }\r\n\r\n    \r\n    } else {\r\n        return <div className=\"tc\"><p>Try searching for a cocktail</p></div>;\r\n    }\r\n\r\n    }\r\n    \r\n\r\n\r\n\r\nexport default Recipelist;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Searchbox = ({ keyDown, keyUp, keyPress }) => {\r\n    return(\r\n        <div className=\"pa2 tc\"> \r\n            <input \r\n            className=\" pa3 ba b--green bg-lightest-blue tc\" \r\n            placeholder=\"Search for cocktails here\" \r\n            type=\"text\"\r\n            onKeyDown={keyDown}\r\n            onKeyUp={keyUp}\r\n            onKeyPress={keyPress}\r\n            />\r\n        </div>\r\n       \r\n    );\r\n\r\n};\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport './App.css';\r\nimport RecipeList from '../components/RecipeList';\r\nimport Searchbox from '../components/Searchbox'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      drink: {},\r\n      query: '',\r\n    \r\n\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  onKeyDown = (event) => {\r\n    if (event.keyCode === 13){ \r\n      this.setState({query:`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${event.target.value}`})\r\n    }\r\n\r\n  }\r\n\r\n  onKeyUp = (event) => {\r\n    if (event.keyCode === 13 ) {\r\n      fetch(this.state.query)\r\n      .then(resp => resp.json())\r\n      .then(resp => this.setState({drink:resp}))\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n      return (\r\n    \r\n            <React.StrictMode>\r\n              <div className=\"tc\">\r\n\r\n              <div><h1 className=\"App\">Cocktail Search App</h1></div>\r\n              <Searchbox keyDown={this.onKeyDown} keyUp ={this.onKeyUp}/>\r\n              <RecipeList recipeJSON={this.state.drink} />\r\n\r\n              </div>\r\n\r\n            </React.StrictMode>\r\n\r\n\r\n        );\r\n  }\r\n    \r\n \r\n}\r\n \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'tachyons'\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}